# Copyright (C) 2022 Unknown <https://github.com/unknownkz/universe>
# All Rights Reserved
#
# Credits : @unknownkz (axel)
# This file is a part of < https://github.com/unknownkz/universe/ >
# PLease read the GNU Affero General Public License in;
# < https://www.github.com/unknownkz/universe/main/LICENSE/ >

from ..UniverseLogger import UniverseLogger as UL
from ..Configuration import MultiVerse
from ..ClassFundamental import (
    Information_Group,
    Information_Command,
    Information_OuterDimensions,
)
from ..EquipmentTools import deleted

_emoticon_ = {"admins": "üë§", "tools": "üõ†Ô∏è", "service": "üî∞", "core": "üíΩ", "fun": "üéÆ"}
_command_prompt_as_trigger = MultiVerse.Trigger


def retriever_data(li):
    for _, _i in Information_Group.items():
        for dimensions in _i:
            if li == dimensions:
                return _
    return None


async def information_group() -> None:
    —ç–∂–¥ = "**Module in Universe :**\n\n"
    various_group = ["admins", "service", "tools", "core", "fun"]
    for _ in various_group:
        OuterDimensions = Information_Group[_]
        —ç–∂–¥ += f"**{_emoticon_[_]} {_.title()} **({len(OuterDimensions)}) :\n"
        for galaxy in OuterDimensions:
            —ç–∂–¥ += f" `{galaxy}` "
        —ç–∂–¥ += "\n\n"
    —ç–∂–¥ += f"**Example:** `{_command_prompt_as_trigger}module -see <name>`"
    return —ç–∂–¥


def retrieve_data(li):
    for _, _i in Information_OuterDimensions.items():
        for _l in _i:
            if li == _l:
                return _
    return None


async def information_command(integritas, incident, dimensions=False):
    if integritas[0] == _command_prompt_as_trigger:
        integritas = integritas[1:]
    try:
        integritas = integritas[1:]
    except BaseException:
        pass


async def information_module(integritas, incident, point):
    try:
        —ç–∂–¥ = Information_OuterDimensions[integritas]
    except KeyError:
        —é–¥—â–±–ª—à = await information_command(
            integritas, incident, dimensions=True
        )
        return —é–¥—â–±–ª—à
    except BaseException:
        await deleted(incident)
        return False
    if len(—ç–∂–¥) == 1 and (point is None or (point != "-see")):
        —é–¥—â–±–ª—à = await information_command(—ç–∂–¥[0], incident, dimensions=True)
        return —é–¥—â–±–ª—à
    —é–¥—â–±–ª—à = f"**Section : **`{integritas}`\n"
    —é–¥—â–±–ª—à += f"**Amount :** `{len(—ç–∂–¥)}`\n"
    category = retriever_data(integritas)
    if category is not None:
        —é–¥—â–±–ª—à += f"**Category :** `{category}`\n\n"
    for –π—Ü—à in sorted(—ç–∂–¥):
        —é–¥—â–±–ª—à += f"‚Ä¢ **Run ‚Ä∫_**   `{_command_prompt_as_trigger}{–π—Ü—à}`\n"
    —é–¥—â–±–ª—à += f"\n`Depends on your understanding.`"
    return —é–¥—â–±–ª—à


async def outer_lists() -> None:
    """Bug ? üòè"""
    —é–¥—â–±–ª—à = "**Total of Commands ‚Ä∫_**\n\n"
    ‡∏£‡∏ô‡∏¢‡∏ö‡∏• = ["admins", "service", "tools", "core", "fun"]
    for –π—è–ª–¥ in ‡∏£‡∏ô‡∏¢‡∏ö‡∏•:
        ‡∏ü‡∏´‡∏Å‡∏î‡πÄ = Information_Group[–π—è–ª–¥]
        —é–¥—â–±–ª—à += f"**{_emoticon_[–π—è–ª–¥]} {–π—è–ª–¥.title()} ** - {len(‡∏ü‡∏´‡∏Å‡∏î‡πÄ)}\n\n"
        for „ÖÇ„Öà„Ñ∑„Ñ± in ‡∏ü‡∏´‡∏Å‡∏î‡πÄ:
            „Öé„Öó„Öì„Öè = Information_OuterDimensions[„ÖÇ„Öà„Ñ∑„Ñ±]
            —é–¥—â–±–ª—à += f"‚Ä¢ **{„ÖÇ„Öà„Ñ∑„Ñ±.title()} has {len(„Öé„Öó„Öì„Öè)} commands**\n"
            for „Éº in sorted(„Öé„Öó„Öì„Öè):
                —é–¥—â–±–ª—à += f" - `{_command_prompt_as_trigger}{„Éº}`\n"
            —é–¥—â–±–ª—à += "\n"
    return —é–¥—â–±–ª—à
